//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.3

use super::sea_orm_active_enums::SocialProviderType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub default_social_profile: SocialProviderType,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::workspace::Entity")]
    Workspace,
    #[sea_orm(has_many = "super::task_group::Entity")]
    TaskGroup,
    #[sea_orm(has_many = "super::social_profile::Entity")]
    SocialProfile,
    #[sea_orm(has_many = "super::label::Entity")]
    Label,
    #[sea_orm(has_many = "super::task::Entity")]
    Task,
}

impl Related<super::workspace::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Workspace.def()
    }
}

impl Related<super::task_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TaskGroup.def()
    }
}

impl Related<super::social_profile::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SocialProfile.def()
    }
}

impl Related<super::label::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Label.def()
    }
}

impl Related<super::task::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Task.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
